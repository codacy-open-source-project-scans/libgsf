Backport of
commit df7ab90d537c25507b0a7dba046380cbce31e451
Author: Morten Welinder <terra@gnome.org>
Date:   Fri Mar 1 13:24:34 2013 -0500

    Introspection fixes

diff --git a/gsf/gsf-infile-msole.c b/gsf/gsf-infile-msole.c
index 4990fcd..a6bb268 100644
--- a/gsf/gsf-infile-msole.c
+++ b/gsf/gsf-infile-msole.c
@@ -116,15 +116,15 @@ ole_seek_block (GsfInfileMSOle const *ole, guint32 block, gsf_off_t offset)
 }
 
 /**
- * ole_get_block :
+ * ole_get_block: (skip)
  * @ole: the infile
  * @block: block number
- * @buffer: optionally NULL
+ * @buffer: optionally %NULL
  *
  * Read a block of data from the underlying input.
  * Be really anal.
  *
- * Returns: pointer to the buffer or NULL if there is an error or 0 bytes are
+ * Returns: pointer to the buffer or %NULL if there is an error or 0 bytes are
  * requested.
  **/
 static guint8 const *
diff --git a/gsf/gsf-infile-msvba.c b/gsf/gsf-infile-msvba.c
index c187d59..3dc925b 100644
--- a/gsf/gsf-infile-msvba.c
+++ b/gsf/gsf-infile-msvba.c
@@ -143,7 +143,7 @@ vba_extract_module_source (GsfInfileMSVBA *vba, char const *name, guint32 src_of
 /**
  * vba_dir_read:
  * @vba: #GsfInfileMSVBA
- * @err: optionally NULL
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
  * Read an VBA dirctory and its project file.
  * along the way.
@@ -334,7 +334,7 @@ fail_stream :
 /**
  * vba_project_read:
  * @vba: #GsfInfileMSVBA
- * @err: optionally NULL
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
  * Read an VBA dirctory and its project file.
  * along the way.
@@ -544,7 +544,7 @@ gsf_infile_msvba_steal_modules (GsfInfileMSVBA *vba_stream)
  *
  * A utility routine that attempts to find the VBA file withint a stream.
  *
- * Returns: (transfer full): a GsfInfileMSVBA *gsf_input_find_vba (GsfInput *input, GError *err);
+ * Returns: (transfer full): a GsfInfile
  **/
 GsfInfileMSVBA *
 gsf_input_find_vba (GsfInput *input, GError **err)
diff --git a/gsf/gsf-infile.c b/gsf/gsf-infile.c
index 4e09f8f..1aea12b 100644
--- a/gsf/gsf-infile.c
+++ b/gsf/gsf-infile.c
@@ -62,7 +62,7 @@ gsf_infile_name_by_index (GsfInfile *infile, int i)
  * @infile: #GsfInfile
  * @i: target index
  *
- * TODO : For 2.0 api will change to include a GError.
+ * TODO : For 2.0 api will change to include a #GError.
  * Returns: (transfer full): a newly created child which must be unrefed.
  **/
 GsfInput *
@@ -95,7 +95,7 @@ gsf_infile_child_by_index (GsfInfile *infile, int i)
  * works for an immediate child.  If you need to go several levels
  * down use gsf_infile_child_by_aname, for example.
  *
- * TODO : For 2.0 api will change to include a GError.
+ * TODO : For 2.0 api will change to include a #GError.
  *
  * Returns: (transfer full): a newly created child which must be
  * unrefed.
diff --git a/gsf/gsf-input-gio.c b/gsf/gsf-input-gio.c
index 617ffd4..ed71fd4 100644
--- a/gsf/gsf-input-gio.c
+++ b/gsf/gsf-input-gio.c
@@ -114,9 +114,9 @@ make_local_copy (GFile *file, GInputStream *stream)
 /**
  * gsf_input_gio_new:
  * @file:
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
- * Returns: A new #GsfInputGio or NULL
+ * Returns: A new #GsfInputGio or %NULL
  */
 GsfInput *
 gsf_input_gio_new (GFile *file, GError **err)
@@ -163,9 +163,9 @@ gsf_input_gio_new (GFile *file, GError **err)
 /**
  * gsf_input_gio_new_for_path:
  * @path:
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
- * Returns: A new #GsfInputGio or NULL
+ * Returns: A new #GsfInputGio or %NULL
  */
 GsfInput *
 gsf_input_gio_new_for_path (char const *path, GError **err)
@@ -185,9 +185,9 @@ gsf_input_gio_new_for_path (char const *path, GError **err)
 /**
  * gsf_input_gio_new_for_uri:
  * @uri:
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
- * Returns: A new #GsfInputGio or NULL
+ * Returns: A new #GsfInputGio or %NULL
  */
 GsfInput *
 gsf_input_gio_new_for_uri (char const *uri, GError **err)
diff --git a/gsf/gsf-input-iochannel.c b/gsf/gsf-input-iochannel.c
index b12be30..778c946 100644
--- a/gsf/gsf-input-iochannel.c
+++ b/gsf/gsf-input-iochannel.c
@@ -29,7 +29,7 @@
  * @channel: a #GIOChannel.
  * @error: a #GError
  *
- * Returns: a new #GsfInputMemory or NULL.
+ * Returns: a new #GsfInputMemory or %NULL.
  **/
 GsfInput *
 gsf_input_memory_new_from_iochannel (GIOChannel *channel,
diff --git a/gsf/gsf-input-stdio.c b/gsf/gsf-input-stdio.c
index 5c9ed13..6b534a5 100644
--- a/gsf/gsf-input-stdio.c
+++ b/gsf/gsf-input-stdio.c
@@ -103,9 +103,9 @@ error:
 /**
  * gsf_input_stdio_new:
  * @filename: in utf8.
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
- * Returns: a new file or NULL.
+ * Returns: a new file or %NULL.
  **/
 /* coverity[ -tainted_string_sink_content : arg-0 ] */
 GsfInput *
diff --git a/gsf/gsf-input.c b/gsf/gsf-input.c
index f02782f..c95896e 100644
--- a/gsf/gsf-input.c
+++ b/gsf/gsf-input.c
@@ -531,7 +531,7 @@ gsf_input_seek_emulate (GsfInput *input, gsf_off_t pos)
 /**
  * gsf_input_error_id:
  *
- * Returns: A utility quark to flag a GError as being an input problem.
+ * Returns: A utility quark to flag a #GError as being an input problem.
  */
 GQuark
 gsf_input_error_id (void)
@@ -547,7 +547,7 @@ gsf_input_error_id (void)
  *
  * Deprecated as of GSF 1.12.0; use gsf_input_error_id() instead.
  *
- * Returns: A utility quark to flag a GError as being an input problem.
+ * Returns: A utility quark to flag a #GError as being an input problem.
  */
 GQuark
 gsf_input_error (void)
diff --git a/gsf/gsf-libxml.c b/gsf/gsf-libxml.c
index 73b82b6..b428c1c 100644
--- a/gsf/gsf-libxml.c
+++ b/gsf/gsf-libxml.c
@@ -358,9 +358,9 @@ gsf_xml_parser_context (GsfInput *input)
 }
 
 /**
- * gsf_xml_output_buffer_new:
+ * gsf_xml_output_buffer_new: (skip)
  * @output: #GsfOutput
- * @encoding: optionally %NULL.
+ * @handler (allow-none):
  *
  * <note>This adds a reference to @output.</note>
  * <note>This is <emphasis>not</emphasis> releated to #GsfXMLOut.</note>
@@ -384,7 +384,7 @@ gsf_xml_output_buffer_new (GsfOutput *output,
  * gsf_xmlDocFormatDump:
  * @output: #GsfOutput
  * @cur: #xmlDocPtr
- * @encoding: The encoding to use.
+ * @encoding: (allow-none): The encoding to use.
  * @format: %TRUE to reformat the output.
  *
  * Dumps the document @cur into @output.
@@ -1714,13 +1714,13 @@ close_tag_if_neccessary (GsfXMLOut* xout)
 /**
  * gsf_xml_out_add_cstr_unchecked:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
- * @val_utf8: a utf8 encoded string to export
+ * @id: (allow-none): tag id or %NULL for content
+ * @val_utf8: (allow-none): a utf8 encoded string to export
  *
- * dump @val_utf8 to an attribute named @id without checking to see if the
- * content needs escaping.  A useful performance enhancement when the
- * application knows that structure of the content well.  If @val_utf8 is NULL
- * do nothing (no warning, no output)
+ * dump @val_utf8 to an attribute named @id without checking to see if
+ * the content needs escaping.  A useful performance enhancement when
+ * the application knows that structure of the content well.  If
+ * @val_utf8 is %NULL do nothing (no warning, no output)
  **/
 void
 gsf_xml_out_add_cstr_unchecked (GsfXMLOut *xout, char const *id,
@@ -1741,11 +1741,11 @@ gsf_xml_out_add_cstr_unchecked (GsfXMLOut *xout, char const *id,
 /**
  * gsf_xml_out_add_cstr:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
- * @val_utf8: a utf8 encoded string
+ * @id: (allow-none): tag id or %NULL for content
+ * @val_utf8: (allow-none): a utf8 encoded string
  *
  * dump @val_utf8 to an attribute named @id or as the nodes content escaping
- * characters as necessary.  If @val_utf8 is NULL do nothing (no warning, no
+ * characters as necessary.  If @val_utf8 is %NULL do nothing (no warning, no
  * output)
  **/
 void
@@ -1820,7 +1820,7 @@ gsf_xml_out_add_cstr (GsfXMLOut *xout, char const *id,
 /**
  * gsf_xml_out_add_bool:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
+ * @id: (allow-none): tag id or %NULL for content
  * @val: a boolean
  *
  * dump boolean value @val to an attribute named @id or as the nodes content
@@ -1837,7 +1837,7 @@ gsf_xml_out_add_bool (GsfXMLOut *xout, char const *id,
 /**
  * gsf_xml_out_add_int:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
+ * @id: (allow-none): tag id or %NULL for content
  * @val: the value
  *
  * dump integer value @val to an attribute named @id or as the nodes content
@@ -1854,7 +1854,7 @@ gsf_xml_out_add_int (GsfXMLOut *xout, char const *id,
 /**
  * gsf_xml_out_add_uint:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
+ * @id: (allow-none): tag id or %NULL for content
  * @val: the value
  *
  * dump unsigned integer value @val to an attribute named @id or as the nodes
@@ -1872,7 +1872,7 @@ gsf_xml_out_add_uint (GsfXMLOut *xout, char const *id,
 /**
  * gsf_xml_out_add_float:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
+ * @id: (allow-none): tag id or %NULL for content
  * @val: the value
  * @precision: the number of significant digits to use, -1 meaning "enough".
  *
@@ -1898,7 +1898,7 @@ gsf_xml_out_add_float (GsfXMLOut *xout, char const *id,
 /**
  * gsf_xml_out_add_color:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
+ * @id: (allow-none): tag id or %NULL for content
  * @r: Red value
  * @g: Green value
  * @b: Blue value
@@ -1917,7 +1917,7 @@ gsf_xml_out_add_color (GsfXMLOut *xout, char const *id,
 /**
  * gsf_xml_out_add_enum:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
+ * @id: (allow-none): tag id or %NULL for content
  * @etype: #GType
  * @val: enum element number
  *
@@ -1940,7 +1940,7 @@ gsf_xml_out_add_enum (GsfXMLOut *xout, char const *id, GType etype, gint val)
 /**
  * gsf_xml_out_add_gvalue:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
+ * @id: (allow-none): tag id or %NULL for content
  * @val: #GValue
  *
  * Output the value of @val as a string.  Does NOT store any type information
@@ -2021,11 +2021,11 @@ gsf_xml_out_add_gvalue (GsfXMLOut *xout, char const *id, GValue const *val)
 /**
  * gsf_xml_out_add_base64:
  * @xout: #GsfXMLOut
- * @id: optionally NULL for content
+ * @id: (allow-none): tag id or %NULL for content
  * @data: Data to be written
  * @len: Length of data
  *
- * dump @len bytes in @data into the content of node @id using base64
+ * Dump @len bytes in @data into the content of node @id using base64
  **/
 void
 gsf_xml_out_add_base64 (GsfXMLOut *xout, char const *id,
diff --git a/gsf/gsf-msole-utils.c b/gsf/gsf-msole-utils.c
index 2090ade..ec72ba2 100644
--- a/gsf/gsf-msole-utils.c
+++ b/gsf/gsf-msole-utils.c
@@ -1103,7 +1103,7 @@ msole_prop_cmp (gconstpointer a, gconstpointer b)
  *
  * Since: 1.14.24
  *
- * Returns: GError which the caller must free on error.
+ * Returns: (transfer full): A #GError if there was an error.
  **/
 GError *
 gsf_doc_meta_data_read_from_msole (GsfDocMetaData *accum, GsfInput *in)
@@ -1319,7 +1319,7 @@ gsf_doc_meta_data_read_from_msole (GsfDocMetaData *accum, GsfInput *in)
  *
  * Deprecated: 1.14.24, use gsf_doc_meta_data_read_from_msole
  *
- * Returns: GError which the caller must free on error.
+ * Returns: (transfer full): A #GError if there was an error.
  **/
 GError *
 gsf_msole_metadata_read	(GsfInput *in, GsfDocMetaData *accum)
diff --git a/gsf/gsf-open-pkg-utils.c b/gsf/gsf-open-pkg-utils.c
index cad01e0..91b5083 100644
--- a/gsf/gsf-open-pkg-utils.c
+++ b/gsf/gsf-open-pkg-utils.c
@@ -392,7 +392,7 @@ gsf_open_pkg_open_rel_by_type (GsfInput *opkg, char const *type, GError **err)
  *
  * Convenience function to parse a related part.
  *
- * Returns: NULL on success or a GError which callerss need to free on failure.
+ * Returns: (transfer full): %NULL on success or a #GError on failure.
  **/
 GError *
 gsf_open_pkg_parse_rel_by_id (GsfXMLIn *xin, char const *id,
diff --git a/gsf/gsf-opendoc-utils.c b/gsf/gsf-opendoc-utils.c
index 0deac72..8555ddd 100644
--- a/gsf/gsf-opendoc-utils.c
+++ b/gsf/gsf-opendoc-utils.c
@@ -499,9 +499,9 @@ static GsfXMLInNode const gsf_opendoc_meta_dtd[] = {
  *
  * Since: 1.14.24
  *
- * Returns: a GError if there is a problem.
+ * Returns: (transfer full): a #GError if there is a problem.
  **/
-GError	*
+GError*
 gsf_doc_meta_data_read_from_odf (GsfDocMetaData *md, GsfInput *input)
 {
 	GsfXMLInDoc	*doc;
@@ -538,7 +538,7 @@ gsf_doc_meta_data_read_from_odf (GsfDocMetaData *md, GsfInput *input)
  *
  * Deprecated: 1.14.24, use gsf_doc_meta_data_read_from_odf
  *
- * Returns: a GError if there is a problem.
+ * Returns: (transfer full): a #GError if there is a problem.
  **/
 GError *
 gsf_opendoc_metadata_read (GsfInput *input, GsfDocMetaData *md)
@@ -746,7 +746,7 @@ meta_write_props (char const *prop_name, GsfDocProp *prop, GsfXMLOut *output)
  *
  * Since: 1.14.24
  *
- * Returns: TRUE if no error occured.
+ * Returns: %TRUE if no error occured.
  **/
 gboolean
 gsf_doc_meta_data_write_to_odf (GsfDocMetaData const *md, gpointer output)
@@ -797,7 +797,7 @@ gsf_doc_meta_data_write_to_odf (GsfDocMetaData const *md, gpointer output)
  *
  * Deprecated: 1.14.24, use gsf_doc_meta_data_write_to_odf
  *
- * Returns: TRUE if no error occured.
+ * Returns: %TRUE if no error occured.
  **/
 gboolean
 gsf_opendoc_metadata_write (gpointer output, GsfDocMetaData const *md)
diff --git a/gsf/gsf-outfile-msole.c b/gsf/gsf-outfile-msole.c
index 87ed2e1..38b4b47 100644
--- a/gsf/gsf-outfile-msole.c
+++ b/gsf/gsf-outfile-msole.c
@@ -806,7 +806,7 @@ gsf_outfile_msole_new (GsfOutput *sink)
  *
  * Write @clsid to the directory associated with @ole.
  *
- * Returns: TRUE on success.
+ * Returns: %TRUE on success.
  **/
 gboolean
 gsf_outfile_msole_set_class_id (GsfOutfileMSOle *ole, guint8 const *clsid)
diff --git a/gsf/gsf-outfile-stdio.c b/gsf/gsf-outfile-stdio.c
index e813205..834fb98 100644
--- a/gsf/gsf-outfile-stdio.c
+++ b/gsf/gsf-outfile-stdio.c
@@ -104,11 +104,11 @@ GSF_CLASS (GsfOutfileStdio, gsf_outfile_stdio,
 /**
  * gsf_outfile_stdio_new_valist:
  * @root: root directory in utf8.
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  * @first_property_name: name of first property to set
  * @var_args: a %NULL-terminated #va_list
  *
- * Returns: a new outfile or NULL.
+ * Returns (transfer full): a new outfile or %NULL.
  **/
 GsfOutfile *
 gsf_outfile_stdio_new_valist (char const *root, GError **err,
@@ -140,12 +140,12 @@ gsf_outfile_stdio_new_valist (char const *root, GError **err,
 /**
  * gsf_outfile_stdio_new_full:
  * @root: root directory in utf8.
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  * @first_property_name: name of first property to set
  * @...: value of first property, followed by more properties,
  * 		%NULL-terminated
  *
- * Returns: a new outfile or NULL.
+ * Returns (transfer full): a new outfile or %NULL.
  **/
 GsfOutfile *
 gsf_outfile_stdio_new_full (char const *root, GError **err,
@@ -165,9 +165,9 @@ gsf_outfile_stdio_new_full (char const *root, GError **err,
 /**
  * gsf_outfile_stdio_new:
  * @root: root directory in utf8.
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
- * Returns: a new outfile or NULL.
+ * Returns: a new outfile or %NULL.
  **/
 GsfOutfile *
 gsf_outfile_stdio_new (char const *root, GError **err)
diff --git a/gsf/gsf-outfile.c b/gsf/gsf-outfile.c
index bff47ef..08ed232 100644
--- a/gsf/gsf-outfile.c
+++ b/gsf/gsf-outfile.c
@@ -44,7 +44,7 @@ gsf_outfile_new_child (GsfOutfile *outfile,
  * gsf_outfile_new_child_full:
  * @outfile: A #GsfOutfile
  * @name: The name of the new child to create
- * @is_dir: TRUE to create a directory, FALSE to create a plain file
+ * @is_dir: %TRUE to create a directory, %FALSE to create a plain file
  * @first_property_name:
  * @...:
  *
@@ -73,7 +73,7 @@ gsf_outfile_new_child_full (GsfOutfile *outfile,
  * gsf_outfile_new_child_varg:
  * @outfile: A #GsfOutfile
  * @name: The name of the new child to create
- * @is_dir: TRUE to create a directory, FALSE to create a plain file
+ * @is_dir: %TRUE to create a directory, %FALSE to create a plain file
  * @first_property_name:
  * @args:
  *
diff --git a/gsf/gsf-output-gio.c b/gsf/gsf-output-gio.c
index 1d54ea2..ff5ce36 100644
--- a/gsf/gsf-output-gio.c
+++ b/gsf/gsf-output-gio.c
@@ -59,7 +59,7 @@ wrap_if_not_seekable (GsfOutputGio *output, GError **err)
  * gsf_output_gio_new_full:
  * @file: an existing GFile
  *
- * Returns: A new #GsfOutputGio or NULL
+ * Returns: (transfer full): A new #GsfOutputGio or %NULL
  */
 static GsfOutput *
 gsf_output_gio_new_full (GFile *file, GError **err)
@@ -86,7 +86,7 @@ gsf_output_gio_new_full (GFile *file, GError **err)
  * gsf_output_gio_new:
  * @file: an existing GFile
  *
- * Returns: A new #GsfOutputGio or NULL
+ * Returns: (transfer full): A new #GsfOutputGio or %NULL
  */
 GsfOutput *
 gsf_output_gio_new (GFile *file)
@@ -97,9 +97,9 @@ gsf_output_gio_new (GFile *file)
 /**
  * gsf_output_gio_new_for_path:
  * @path:
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
- * Returns: A new #GsfOutputGio or NULL
+ * Returns: (transfer full): A new #GsfOutputGio or %NULL
  */
 GsfOutput *
 gsf_output_gio_new_for_path (char const *path, GError **err)
@@ -125,9 +125,9 @@ gsf_output_gio_new_for_path (char const *path, GError **err)
 /**
  * gsf_output_gio_new_for_uri:
  * @uri:
- * @err: optionally NULL.
+ * @err: (allow-none): place to store a #GError if anything goes wrong
  *
- * Returns: A new #GsfOutputGio or NULL
+ * Returns: (transfer full): A new #GsfOutputGio or %NULL
  */
 GsfOutput *
 gsf_output_gio_new_for_uri (char const *uri, GError **err)
diff --git a/gsf/gsf-output-iochannel.c b/gsf/gsf-output-iochannel.c
index 3df476c..1521784 100644
--- a/gsf/gsf-output-iochannel.c
+++ b/gsf/gsf-output-iochannel.c
@@ -37,7 +37,7 @@ typedef struct {
  * gsf_output_iochannel_new:
  * @channel: A #GIOChannel
  *
- * Returns: a new file or NULL.
+ * Returns: (transfer full): a new file or %NULL.
  **/
 GsfOutput *
 gsf_output_iochannel_new (GIOChannel *channel)
diff --git a/gsf/gsf-utils.c b/gsf/gsf-utils.c
index da744fa..6f721c8 100644
--- a/gsf/gsf-utils.c
+++ b/gsf/gsf-utils.c
@@ -720,7 +720,7 @@ gsf_base64_decode_simple (guint8 *data, size_t len)
  * @p_params: a pointer to the GParameter array that holds the properties.
  *   (Used for both input and output.  This may point to a %NULL pointer if
  *   there are no properties collected yet.)
- * @first_property_name: the name of the first property being set, or NULL.
+ * @first_property_name: the name of the first property being set, or %NULL.
  * @var_args: a va_list holding the remainder of the property names and
  *   values, terminated by a %NULL.
  *
